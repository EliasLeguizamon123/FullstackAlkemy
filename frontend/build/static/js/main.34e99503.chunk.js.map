{"version":3,"sources":["components/NavBar.js","components/Card.js","components/Home.js","components/Form.js","pages/EditForm.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","borderBottom","borderColor","p","spacing","justify","boxShadow","to","Add","Card","ID","concept","amount","creationDate","isType","category","type","toast","useToast","deleteForm","useHistory","a","axios","delete","title","description","status","duration","isClosable","console","log","w","bg","useColorModeValue","rounded","overflow","textAlign","color","align","fontSize","fontWeight","px","direction","py","mt","_hover","position","onClick","Home","form","useState","forms","setForms","isLoading","setIsLoading","fetchForms","get","response","data","useEffect","display","alignItems","justifyContent","h","size","emptyColor","speed","columns","lg","md","sm","pt","map","MyForm","history","addForm","values","post","push","editForm","put","initialValues","formik","useFormik","onSubmit","handleSubmit","isRequired","name","value","onChange","handleChange","placeholder","Check","Close","EditForm","setData","useParams","getFormById","formData","App","maxW","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34e99503.chunk.js","sourcesContent":["import {HStack, Button, Text} from '@chakra-ui/react';\r\nimport { AddIcon, } from '@chakra-ui/icons';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function NavBar() {\r\n\r\n    return (\r\n        <HStack borderBottom=\"1px\" borderColor=\"gray.100\" p={2} spacing={2}  justify=\"center\" boxShadow=\"md\">\r\n            <Link to='/new'>\r\n                <Button>\r\n                    <AddIcon /> \r\n                    <Text>\r\n                        Agregar Formulario\r\n                    </Text>\r\n                </Button>\r\n            </Link>\r\n        </HStack>\r\n    )\r\n};","import {\r\n\t\tBox,\r\n\t\tCenter,\r\n\t\tText,\r\n\t\tStack,\r\n\t\tButton,\r\n\t\tuseColorModeValue,\r\n\t\tuseToast\r\n\t} from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport {Link, useHistory} from 'react-router-dom';\r\n\r\nexport default function Card ({ ID, concept, amount, creationDate, isType, category}) {\r\n\t\tlet type = isType === 1 ? 'Ingreso' : 'Egreso';\r\n\t\tconst toast = useToast();\r\n\t\tlet history = useHistory();\r\n\r\n\t\tconst deleteForm = async  ID => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait axios.delete(`https://whispering-forest-95291.herokuapp.com/${ ID }`)\r\n\t\t\t\t\ttoast({\r\n\t\t\t\t\t\ttitle: \"Éxito\",\r\n          \t\t\t\tdescription: \"Formulario eliminado exitosamente\",\r\n\t\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\t\tduration: 9000,\r\n\t\t\t\t\t\tisClosable: true,\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\tcatch (err) {console.log(err)}\r\n\t\t\t}\r\n\r\n\t\t\treturn (\r\n\t\t\t\t\t<Center w=\"100%\">\r\n\t\t\t\t<Box\r\n\t\t\t\t\t\tw=\"100%\"\r\n\t\t\t\t\t\tbg={useColorModeValue('white', 'gray.800')}\r\n\t\t\t\t\t\tboxShadow={'2xl'}\r\n\t\t\t\t\t\trounded={'md'}\r\n\t\t\t\t\t\toverflow={'hidden'}>\r\n\t\t\t\t\t<Stack\r\n\t\t\t\t\t\t\ttextAlign={'center'}\r\n\t\t\t\t\t\t\tp={6}\r\n\t\t\t\t\t\t\tcolor={useColorModeValue('gray.800', 'white')}\r\n\t\t\t\t\t\t\talign={'center'}>\r\n\t\t\t\t\t\t\t<Text\r\n\t\t\t\t\t\t\t\tfontSize={'sm'}\r\n\t\t\t\t\t\t\t\tfontWeight={500}\r\n\t\t\t\t\t\t\t\tbg={useColorModeValue('cyan.100', 'cyan.900')}\r\n\t\t\t\t\t\t\t\tp={2}\r\n\t\t\t\t\t\t\t\tpx={3}\r\n\t\t\t\t\t\t\t\tcolor={'gray.500'}\r\n\t\t\t\t\t\t\t\trounded={'full'}>\r\n\t\t\t\t\t\t\t\t{type}\r\n\t\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t<Stack direction={'column'} align={'center'} justify={'center'}>\r\n\t\t\t\t\t\t\t\t<Text fontSize={'4xl'} fontWeight={800}>\r\n\t\t\t\t\t\t\t\t{`$${amount}`}\r\n\t\t\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t<Text fontSize={'2xl'} fontWeight={800}> Categoria: {category} </Text>\r\n\t\t\t\t\t\t</Stack>\r\n\t\t\t\t\t</Stack>\r\n\t\t\t\t\t<Box bg={useColorModeValue('gray.50', 'gray.900')} px={6} py={10}>\r\n\t\t\t\t\t\t\t<Stack direction={'column'} align={'center'} justify={'center'} spacing={5}>\r\n\t\t\t\t\t\t\t\t\t<Text>{`Fecha de creación: ${creationDate}`}</Text>\r\n\t\t\t\t\t\t\t\t\t<Text>{`Concepto: ${concept}`}</Text>\r\n\t\t\t\t\t\t\t</Stack>\r\n\t\t\t\t\t\t\t<Stack direction={'row'} align={'center'} justify={'center'} spacing={24} mt={10}>\r\n\t\t\t\t\t\t\t\t\t<Link to={`/edit/${ID}`} >\r\n\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\tbg={'gray.400'}\r\n\t\t\t\t\t\t\t\t\t\t\t\tcolor={'white'}\r\n\t\t\t\t\t\t\t\t\t\t\t\trounded={'xl'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t_hover={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbg: 'cyan.100',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'gray.600'\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\tEditar \r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\tbg={'gray.400'}\r\n\t\t\t\t\t\t\t\t\t\t\tcolor={'white'}\r\n\t\t\t\t\t\t\t\t\t\t\trounded={'xl'}\r\n\t\t\t\t\t\t\t\t\t\t\t_hover={{\r\n\t\t\t\t\t\t\t\t\t\t\tbg: 'cyan.100',\r\n\t\t\t\t\t\t\t\t\t\t\tcolor: 'gray.600'\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\tposition=\"end\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => deleteForm(ID)}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\tEliminar\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Stack> \r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Box>\r\n\t\t\t</Center>\r\n\t\t\t)\r\n}","import {SimpleGrid, Spinner, Box} from '@chakra-ui/react'\r\nimport Card from './Card';\r\nimport {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\n\r\nconst Home = (form) => {\r\n    const [forms, setForms] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    \r\n    const fetchForms = async () => {\r\n        try {\r\n            const response = await axios\r\n            .get('https://whispering-forest-95291.herokuapp.com')\r\n            const data = await response.data;\r\n            setForms(() => data);\r\n            console.log(data);\r\n            setIsLoading(false);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchForms();\r\n    }, []);\r\n    \r\n    if (isLoading) {\r\n        return (\r\n            <Box display={'flex'} alignItems={'center'} justifyContent={'center'} h={'80vh'}>\r\n                <Spinner color=\"teal\" size=\"xl\" emptyColor=\"gray.200\" speed=\"0.8s\"/>\r\n            </Box>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <SimpleGrid columns={{lg: 2, md: 1, sm: 1}} mt={4} spacing={10} pt={10}>\r\n            {\r\n                forms.map(form => (\r\n                    <Card key={form.ID} {...form}/>\r\n                ))\r\n            }\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import { useFormik } from 'formik';\r\nimport {\r\n    Box, \r\n    Stack, \r\n    Button, \r\n    FormControl, \r\n    FormLabel, \r\n    Input, \r\n    useColorModeValue, \r\n    Select, \r\n    Text,\r\n    useToast\r\n} from '@chakra-ui/react';\r\nimport {CheckIcon, CloseIcon} from '@chakra-ui/icons';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport default function MyForm ({ ID, concept, amount,  isType, category}) {\r\n    let history = useHistory();\r\n    const toast = useToast();\r\n\r\n    const addForm = async (values) => {\r\n        const response = await axios.post('https://whispering-forest-95291.herokuapp.com/new', values);\r\n        const data = await response.data;\r\n        toast({\r\n            title: \"Éxito\",\r\n              description: \"Formulario creado exitosamente\",\r\n            status: \"success\",\r\n            duration: 9000,\r\n            isClosable: true,\r\n        })\r\n        console.log(data);\r\n        history.push(`/`);\r\n    }\r\n\r\n    const editForm = async (values) => {\r\n        try {\r\n            await axios.put(`https://whispering-forest-95291.herokuapp.com/${ ID }`, values)\r\n            toast({\r\n                title: \"Éxito\",\r\n                  description: \"Formulario actualizado exitosamente\",\r\n                status: \"success\",\r\n                duration: 9000,\r\n                isClosable: true,\r\n            })\r\n            history.push(`/`);\r\n        }\r\n        catch (err) {console.log(err);}\r\n    }\r\n\r\n    const initialValues = {\r\n        concept: concept ? concept : \"\",\r\n        amount: amount ? amount : \"\",\r\n        category: category ? category : \"\",\r\n        isType: isType ? isType : \"\",\r\n    }\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit : values => {\r\n            if(ID){\r\n                editForm(values)\r\n            }else{\r\n                addForm(values)\r\n            }  \r\n        },\r\n    });\r\n\r\nreturn(\r\n    <form onSubmit={formik.handleSubmit}>\r\n        <Box\r\n        w=\"100%\"\r\n        bg={useColorModeValue('white', 'gray.800')}\r\n        boxShadow={'2xl'}\r\n        rounded={'md'}\r\n        overflow={'hidden'}>\r\n            <Stack\r\n            textAlign={'center'}\r\n            p={6}\r\n            color={useColorModeValue('gray.800', 'white')}\r\n            align={'center'}>\r\n                <FormControl mt={2} isRequired>\r\n                    <FormLabel>\r\n                        Concepto\r\n                    </FormLabel>\r\n                    <Input\r\n                    name=\"concept\"\r\n                    type=\"text\"\r\n                    value={formik.values.concept}  \r\n                    onChange={formik.handleChange}                                  \r\n                    />\r\n                </FormControl>\r\n                <FormControl isRequired>\r\n                    <FormLabel>\r\n                    Monto\r\n                    </FormLabel>\r\n                    <Input\r\n                    name=\"amount\"\r\n                    type=\"number\"\r\n                    value={formik.values.amount}\r\n                    onChange={formik.handleChange}\r\n                    />\r\n                </FormControl>\r\n                <FormControl isRequired>\r\n                    <FormLabel>\r\n                    Categoria\r\n                    </FormLabel>\r\n                    <Input\r\n                    name=\"category\"\r\n                    type=\"text\"\r\n                    value={formik.values.category}\r\n                    onChange={formik.handleChange}\r\n                    />\r\n                </FormControl>\r\n                    <FormControl isRequired>\r\n                    <FormLabel>\r\n                        Tipo de operación\r\n                    </FormLabel>\r\n                    <Select name=\"isType\" placeholder=\"Seleccione el tipo de operación\" onChange={formik.handleChange} value={formik.values.isType}>\r\n                        <option value='1'>Ingreso</option>\r\n                        <option value='2'>Egreso</option>\r\n                    </Select>\r\n                </FormControl>\r\n                <Stack direction=\"row\" p={4}>\r\n                    <Button \r\n                    type=\"submit\" \r\n                    bg={'gray.400'} \r\n                    color={'white'} \r\n                    rounded={'xl'} \r\n                    _hover={{bg: 'cyan.100', color: 'gray.600'}}\r\n                    >\r\n                        <CheckIcon />\r\n                        <Text>Guardar</Text>\r\n                    </Button>\r\n                    <Link to='/'>\r\n                        <Button \r\n                        bg={'gray.400'} \r\n                        color={'white'} \r\n                        rounded={'xl'} \r\n                        _hover={{bg: 'cyan.100', color: 'gray.600'}}\r\n                        >\r\n                            <CloseIcon />\r\n                            <Text>Cancelar</Text>\r\n                        </Button>\r\n                    </Link>\r\n                </Stack>\r\n            </Stack>\r\n        </Box>\r\n    </form>\r\n    )\r\n}","import React from 'react'\r\nimport Form from '../components/Form'\r\nimport {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nconst EditForm = () => {\r\n    const [data, setData] = useState();\r\n    let {ID} = useParams();\r\n    useEffect(() =>{\r\n        getFormById(ID);\r\n    },[])\r\n\r\n    const getFormById = async ID => {\r\n        try{\r\n            const response = await axios.get(`https://whispering-forest-95291.herokuapp.com/get/${ID}`)\r\n            const formData = await response.data;\r\n            console.log(formData[0]);\r\n            setData( formData[0] );\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    console.log(data);\r\n\r\n    return (\r\n        <div>\r\n            {data && <Form {...data}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditForm;\r\n","import { Container,  } from '@chakra-ui/react'\nimport NavBar from './components/NavBar';\nimport Home from './components/Home';\nimport Form from './components/Form';\nimport EditForm from './pages/EditForm'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport React from 'react';\n\nfunction App() {\n  return (\n    <Router>\n        <NavBar />\n        <Container py={10} maxW={'container.xl'}>\n            <Switch>\n                <Route exact path=\"/\">\n                        <Home />\n                </Route>\n                <Route exact path=\"/new\">\n                    <Form/>\n                </Route>\n                <Route exact path=\"/edit/:ID\">\n                    <EditForm />\n                </Route>\n                <Route exact path=\"/delete/:id\">\n                    <Form />\n                </Route>\n            </Switch>    \n        </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {ChakraProvider} from '@chakra-ui/react'\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}